@page "/GrapeVarietySettings"
@using Client.Pages.SettingGrapeVarietiesPage.Components
@using Client.Pages.SettingGrapeVarietiesPage.Models;
@using Client.Pages.SettingGrapeVarietiesPage.Models.Request
@using Client.Pages.SettingGrapeVarietiesPage.Models.Response
@using Client.Pages.SettingGrapeVarietiesPage.Services
@using Client.SharedComponents.Modal
@using Microsoft.AspNetCore.Authorization
@inject IGrapeVarietiesApiService apiService

<div class="contentRowsContainer">
    <div class="listProjects">
        @if (GrapeData != null)
        {
            <GrapeVarietyTable Data="GrapeData" DeleteButtonEvent="DeleteGrapeVariety" EditButtonEvent="UpdateGrapeVariety" AddButtonEvent="ShowAddGrapeVarietyForm" />
        }
        @AddGrapeVarietyForm
    </div>
</div>
@code {
    /// <summary>
    /// Список проектов
    /// </summary>
    public List<GrapeVarietyResponse> GrapeData { get; set; } = new();

    /// <summary>
    /// Заголовки таблицы с проектами
    /// </summary>
    private List<string> TableHeaders = new();

    /// <summary>
    /// Форма для добавления сорта винограда
    /// </summary>
    private RenderFragment AddGrapeVarietyForm = builder => { };

    /// <summary>
    /// Модалка
    /// </summary>
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        GrapeData = await GetGapeVarietiesAsync();
    }

    private async Task DeleteGrapeVariety(GrapeVarietyResponse model)
    {
        var result = await apiService.RemoveGrapeVarietyAsync(model.Id);
        if (result)
        {
            GrapeData.Remove(model);
        }
        else
            ShowErrorModal("Ошибка в ходе удаления сорта винограда. Попробуйте повторить попытку позже.", "Ошибка при удалении сорта винограда");
    }

    private async Task UpdateGrapeVariety(GrapeVarietyResponse model)
    {
        var result = await apiService.UpdateGrapeVariety(model);
        if (result)
        {
            var existItem = GrapeData.First(x => x.Id == model.Id);
            existItem.SugarValue = model.SugarValue;
            existItem.AcidValue = model.AcidValue;
            existItem.GrapeVarietyName = model.GrapeVarietyName;
        }
        else
            ShowErrorModal("Ошибка в ходе обновления сорта винограда. Попробуйте повторить попытку позже.", "Ошибка при обновлении показаний сорта винограда");

    }

    private async Task<List<GrapeVarietyResponse>> GetGapeVarietiesAsync()
    {
        return await apiService.GetGrapeVarieties();
    }

    private async Task CreateGrapeVariety(GrapeVarietyRequest model)
    {
        var createdMoedl = new GrapeVarietyResponse()
        {
                AcidValue = (int)model.AcidValue!,
                SugarValue = (int)model.SugarValue!,
                GrapeVarietyName = model.GrapeVarietyName,
        };
        var result = await apiService.AddGrapeVarietyAsync(createdMoedl);
        if (result !=null)
        {
            GrapeData.Add(result);
            AddGrapeVarietyForm = builder => { };
        }
        else
            ShowErrorModal("Ошибка в ходе создании нового сорта винограда. Попробуйте повторить попытку позже.", "Ошибка при создании сорта винограда");
    }

    /// <summary>
    /// Обработчик кнопки добавления нового сорта винограда
    /// Отображает формочку с добавлением сорта винограда
    /// </summary>
    private void ShowAddGrapeVarietyForm()
    {
        AddGrapeVarietyForm =@<AddGrapeVarietyComponent SubmitButton="CreateGrapeVariety"></AddGrapeVarietyComponent>;
    }

    private void ShowErrorModal(string message, string title)
    {
        var errors = new List<string>() { message };
        var param = new ModalParameters().Add(nameof(ErrorModal.Errors), errors);
        Modal.Show<ErrorModal>(title, param);
    }
}
