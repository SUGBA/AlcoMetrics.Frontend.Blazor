@page "/TimeLineDayPage/{DayId:int}"
@using Client.Pages.TimeLineDayPage.Components
@using Client.Pages.TimeLineDayPage.Models
@using Client.Pages.TimeLineDayPage.Request
@using Client.Pages.TimeLineDayPage.Response
@using Client.Pages.TimeLineDayPage.Services
@using Client.Pages.TimeLinePage.Extensions
@using Client.SharedComponents.Buttons
@using Client.SharedComponents.Cards
@using Client.SharedComponents.Modal
@using Client.SharedComponents.Selectors
@using Client.SharedComponents.Tables.Models
@inject ITimeLineDayApiService timeLIneDayService
@inject NavigationManager navManager
@rendermode RenderMode.InteractiveWebAssembly


<div class="contentRowsContainer">
    <div class="buttonContainer">
        <BaseButton1 Content="Справка" />
    </div>
    <div class="contentContainer">
        <div class="leftContentContainer">
            <BaseCard1 Content="CardData" />
        </div>
        <div class="rightContentContainer">
            <div class="listProjects">
                <DefaultTable2 Headers="Headers" Buttons="Buttons" Data="Data" />
            </div>
            <div class="selecterContainer">
                <div class="leftselecterContainer">
                    <div class="selectStartDataInputType">
                        <BaseSelector Options="ActualizationOptions" TEnumType="UpdatingMethodEnum" SelectOptionEvent="SelectUpdatingMethod" />
                    </div>
                    @UpdateIndicatorsForm
                </div>

                <div class="rightselecterContainer">
                    <div class="selectStartDataInputType">
                        <BaseSelector Options="AddEventOptions" TEnumType="NewEventTypeEnum" SelectOptionEvent="SelectAddEvent" />
                    </div>
                    @AddEventForm
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// Модалка
    /// </summary>
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    /// <summary>
    /// Id выбранного дня
    /// </summary>
    [Parameter]
    public int DayId { get; set; }

    /// <summary>
    /// Список показателей для карточки
    /// </summary>
    public Dictionary<string, string> CardData { get; set; } = new();

    /// <summary>
    /// Содержимое таблицы
    /// </summary>
    public List<Row> Data { get; set; } = new();

    /// <summary>
    /// Заголовки таблицы
    /// </summary>
    public List<string> Headers { get; set; } = new();

    /// <summary>
    /// Кнопки
    /// </summary>
    public List<ButtonModel> Buttons { get; set; } = new();

    /// <summary>
    /// Список проектов для форомчки добавления события купажировани с выбором проекта
    /// </summary>
    public Dictionary<string, int> Projects { get; set; } = new();

    /// <summary>
    /// Значения селектора с выбором способа актуализации
    /// </summary>
    public Dictionary<string, UpdatingMethodEnum> ActualizationOptions { get; set; } = new();

    /// <summary>
    /// Значения селектора с выбором добавляемого события
    /// </summary>
    public Dictionary<string, NewEventTypeEnum> AddEventOptions { get; set; } = new();

    /// <summary>
    /// Форма для актуализации показаний
    /// </summary>
    private RenderFragment UpdateIndicatorsForm = builder => { };

    /// <summary>
    /// Форма добавления события
    /// </summary>
    private RenderFragment AddEventForm = builder => { };

    private const string EMPTY_INDICATORS_ERROR = "Ошибка в ходе получени яиндикаторов текущего дня.";

    protected override async Task OnInitializedAsync()
    {
        CardData = await Map(await GetCurrentIndicator(DayId));

        Buttons = new List<ButtonModel>()
        {
            new ButtonModel(){Content = "Подтвердить", CLickButton = EventCallback.Factory.Create<int>(this, AcceptEvent)},
            new ButtonModel(){Content = "Удалить", CLickButton = EventCallback.Factory.Create<int>(this, DeleteEvent)}
        };

        Headers = new List<string>() { "Событие", "Тип", "Завершенность" };

        Data = Map(await GetEvents(DayId));

        ActualizationOptions.Add("Показания ареометра", UpdatingMethodEnum.AreometerValue);
        ActualizationOptions.Add("Ввод показателей", UpdatingMethodEnum.AllIndicators);

        AddEventOptions.Add("Шаптализация", NewEventTypeEnum.Shaptalization);
        AddEventOptions.Add("Крепление", NewEventTypeEnum.Alcoholization);
        AddEventOptions.Add("Купажирование на основе проекта", NewEventTypeEnum.BlendingByProject);
        AddEventOptions.Add("Купажирование на основе показателей", NewEventTypeEnum.BlendingByAllParams);

        Projects = await GetListProjects();
    }

    private List<Row> Map(List<CurrentDayEventsResponse> rows)
    {
        var result = new List<Row>(rows.Count);
        for (int i = 0; i < rows.Count; i++)
        {
            result.Add(new Row() { Id = i, Cells = new List<string>() { rows[i].EventName, rows[i].Type, rows[i].IsReady.ToDefaultStringFormat() } });
        }
        return result;
    }

    private async Task<List<CurrentDayEventsResponse>> GetEvents(int dayId)
    {
        var result = await timeLIneDayService.GetEventsAsync(dayId);
        return result.ToList();
    }

    /// <summary>
    /// Отправляем запрос на актуализацию параметров путем ввода всех параметро
    /// </summary>
    /// <param name="model"></param>
    /// <returns></returns>
    private async Task UpdateIndicatorsByAllParamasAsync(UpdateIndicatorsByAllParam model)
    {
        model.DayId = DayId;
        var errors = await timeLIneDayService.UpdateDayIndicatorsByAllParamsAsync(model);
        if (!string.IsNullOrEmpty(errors))
            ShowErrorModal(errors, "Ошибка в ходе актуализации парметров");
    }

    /// <summary>
    /// Отправляем запрос на актуализацию параметров путем ввода показаний ареометра
    /// </summary>
    /// <param name="model"></param>
    /// <returns></returns>
    private async Task UpdateIndicatorsByAreometerAsync(UpdateIndicatorsByAllAreometer model)
    {
        model.DayId = DayId;
        var errors = await timeLIneDayService.UpdateDayIndicatorsByAreometerAsync(model);
        if (!string.IsNullOrEmpty(errors))
            ShowErrorModal(errors, "Ошибка в ходе актуализации парметров");
    }

    /// <summary>
    /// Обработчик события подтверждения события
    /// </summary>
    /// <param name="id"></param>
    private void AcceptEvent(int id)
    {
        var viewDict = new Dictionary<string, string>()
        {
            {"Поле: ", $"{id}" },
            {"Кнопка: ", $"Подтвердить" }
        };
        var parameter = new ModalParameters().Add(nameof(BaseModal1<string>.Values), viewDict);
        Modal.Show<BaseModal1<string>>("Some text from onSubmit", parameter);
    }

    /// <summary>
    /// Обработчик события подтверждения события
    /// </summary>
    /// <param name="id"></param>
    private void DeleteEvent(int id)
    {
        var viewDict = new Dictionary<string, string>()
        {
            {"Поле: ", $"{id}" },
            {"Кнопка: ", $"Удалить" }
        };
        var parameter = new ModalParameters().Add(nameof(BaseModal1<string>.Values), viewDict);
        Modal.Show<BaseModal1<string>>("Some text from onSubmit", parameter);
    }

    /// <summary>
    /// Мапинг в значения для карточек
    /// </summary>
    /// <param name="currentIndicator"></param>
    /// <returns></returns>
    private async Task<Dictionary<string, string>> Map(CurrentDayIndicatrosResponse currentIndicator)
    {
        var indicator = await GetCurrentIndicator(DayId);
        return new Dictionary<string, string>()
        {
            {"Текущая дата", $"{indicator.CurrentDateTime.ToString("dd.mm.yyyy")}"},
            {"Содержание спирта", $"{indicator.EthanolValue.ToString("F2")}%"},
            {"Содержание сахара", $"{indicator.SugarValue.ToString("F2")} Г/Литр"},
            {"Объем", $"{indicator.Wort.ToString("F2")} Литров"},
        };
    }

    /// <summary>
    /// Получение индикатора текущего дня
    /// </summary>
    /// <returns></returns>
    private async Task<CurrentDayIndicatrosResponse> GetCurrentIndicator(int dayId)
    {
        CurrentDayIndicatrosResponse result = await timeLIneDayService.GetCurrentDayIndicatorsAsync(dayId);
        if (result == default(CurrentDayIndicatrosResponse))
        {
            navManager.NavigateTo($"/TimeLinePage/{dayId}");
            ShowErrorModal(EMPTY_INDICATORS_ERROR, "Ошибка в ходе получения показателей текущего дня");
        }
        return result!;
    }

    /// <summary>
    /// Обработчик выбора способа актуализации события
    /// </summary>
    /// <param name="value"></param>
    private void SelectUpdatingMethod(UpdatingMethodEnum value)
    {
        switch (value)
        {
            case UpdatingMethodEnum.AllIndicators:
                UpdateIndicatorsForm =@<UpdateIndicatorsByAllParams OnSubmit="UpdateIndicatorsByAllParamasAsync"></UpdateIndicatorsByAllParams>;
                break;
            case UpdatingMethodEnum.AreometerValue:
                UpdateIndicatorsForm = @<UpdateIndicatorsByAreometer OnSubmit="UpdateIndicatorsByAreometerAsync"></UpdateIndicatorsByAreometer>;
                break;
            default:
                break;
        }
    }

    /// <summary>
    /// Обработчик события выбора элемента селекта
    /// </summary>
    /// <param name="eventType"></param>
    /// <returns></returns>
    private void SelectAddEvent(NewEventTypeEnum eventType)
    {
        switch (eventType)
        {
            case NewEventTypeEnum.Shaptalization:
                AddEventForm = @<AddShaptalizationEventModal></AddShaptalizationEventModal>;
                break;
            case NewEventTypeEnum.Alcoholization:
                AddEventForm = @<AddAlcoholizationEventModal></AddAlcoholizationEventModal>;
                break;
            case NewEventTypeEnum.BlendingByAllParams:
                AddEventForm = @<AddBlendingEventByAllParamsModal></AddBlendingEventByAllParamsModal>;
                break;
            case NewEventTypeEnum.BlendingByProject:
                AddEventForm = @<AddBlendingEventByProjectModal ListProjects="Projects"></AddBlendingEventByProjectModal>;
                break;
            default:
                AddEventForm = builder => { };
                break;
        }
    }

    /// <summary>
    /// Получить список мероприятий конкретного пользователя
    /// </summary>
    /// <returns></returns>
    private Task<Dictionary<string, int>> GetListProjects()
    {
        return Task.Run(() => new Dictionary<string, int>()
        {
            {"Проект #1", 1 },
            {"Проект #2", 2 },
            {"Проект #3", 3 },
            {"Проект #4", 4 }
        });
    }

    /// <summary>
    /// Отобразить модалку со списком ошибок
    /// </summary>
    /// <param name="message"> Сообщения об ошибках </param>
    /// <param name="title"> Заголовок </param>
    private void ShowErrorModal(string message, string title)
    {
        var errors = new List<string>() { message };
        var param = new ModalParameters().Add(nameof(ErrorModal.Errors), errors);
        Modal.Show<ErrorModal>(title, param);
    }
}
