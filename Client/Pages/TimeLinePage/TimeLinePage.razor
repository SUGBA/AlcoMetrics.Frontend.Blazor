@page "/TimeLinePage/{ProjectId:int}"
@using Client.Pages.TimeLinePage.Response
@using Client.Pages.TimeLinePage.Components
@using Client.Pages.TimeLinePage.Services
@using Client.SharedComponents.Buttons
@using Client.SharedComponents.Modal
@rendermode RenderMode.InteractiveWebAssembly
@inject ITimeLineApiService apiService
@inject NavigationManager navManager

<div class="contentRowsContainer">
    <div class="daysContainer">
        @foreach (var item in Days)
        {
            <CalendarDayItem Indicator="item" SelectCardEvent="SelectCard" />
        }
    </div>
</div>

@code {
    private List<DayIndicators> Days = new();

    private const string EMPTY_LIST_DAYS_ERROR = "Ошибка в ходе получения дней мероприйтия. Список дней пуст";

    /// <summary>
    /// Id выбранного проекта
    /// Передается параметром запроса
    /// </summary>
    [Parameter]
    public int ProjectId { get; set; }

    /// <summary>
    /// Модалка
    /// </summary>
    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Days = await GetDays(ProjectId);
    }

    /// <summary>
    /// Получить список дней пользователя по id проекта
    /// </summary>
    /// <param name="projectId"></param>
    /// <returns></returns>
    private async Task<List<DayIndicators>> GetDays(int projectId)
    {
        var result = await apiService.GetDays(projectId);
        if (result.Count() == 0)
        {
            navManager.NavigateTo("/ProjectPage");
            ShowErrorModal(EMPTY_LIST_DAYS_ERROR, "Ошибка при загрузке страницы");
        }
        return result.ToList();
    }

    /// <summary>
    /// Обработчик события нажатия на конкретную карточку
    /// </summary>
    /// <param name="id"> id дня </param>
    private void SelectCard(int id)
    {
        navManager.NavigateTo($"/TimeLineDayPage/{ProjectId}/{id}");
    }

    private void ShowErrorModal(string message, string title)
    {
        var errors = new List<string>() { message };
        var param = new ModalParameters().Add(nameof(ErrorModal.Errors), errors);
        Modal.Show<ErrorModal>(title, param);
    }
}
