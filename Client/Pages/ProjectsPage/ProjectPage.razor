@page "/ProjectPage"
@using Client.Pages.ProjectsPage.Components
@using Client.Pages.ProjectsPage.Models
@using Client.SharedComponents.Forms
@using Client.SharedComponents.Selectors
@using Client.SharedComponents.Tables.Models
@rendermode RenderMode.InteractiveWebAssembly

<div class="contentRowsContainer">
    <div class="listProjects">
        <DefaultTable1 Headers="TableHeaders" Data="ProjectData" DeleteButtonEvent="DeleteRow" EditButtonEvent="EditRow">

        </DefaultTable1>
    </div>
    <div class="selectStartDataInputType">
        <BaseSelector Options="SelectorOptions" SelectOptionEvent="SelectCreateProjectType" TEnumType="SelectorEnum" />
        @CreateProjectForm
    </div>
</div>

@code {
    /// <summary>
    /// Список проектов
    /// </summary>
    public List<Row> ProjectData { get; set; } = new();

    /// <summary>
    /// Заголовки таблицы с проектами
    /// </summary>
    private List<string> TableHeaders = new();

    /// <summary>
    /// Варианты селектора
    /// </summary>
    private Dictionary<string, SelectorEnum> SelectorOptions = new();

    /// <summary>
    /// Форма для создания проекта
    /// </summary>
    private RenderFragment CreateProjectForm = builder => { };

    protected override void OnInitialized()
    {
        ProjectData = GetProjects();
        SelectorOptions = GetCreateProjectTypes();

        TableHeaders = new List<string>() { "Наименование проекта", "Количество мероприятий" };
    }

    /// <summary>
    /// Получить способы создания проекта
    /// </summary>
    /// <returns></returns>
    private Dictionary<string, SelectorEnum> GetCreateProjectTypes()
    {
        return new Dictionary<string, SelectorEnum>()
        {
            {"Ареометр", SelectorEnum.ByAreometer },
            {"Сорт винограда", SelectorEnum.ByGrapeVarety },
            {"Ввод показателей", SelectorEnum.ByAllParams },
        };
    }

    /// <summary>
    /// Получить список проектов
    /// </summary>
    /// <returns></returns>
    private List<Row> GetProjects()
    {
        return new List<Row>()
        {
            new Row(){Cells = { "Проект №1", "2"}, Id = 0},
            new Row(){Cells = { "Проект №2", "0"}, Id = 1},
            new Row(){Cells = { "Проект №3", "1"}, Id = 2},
            new Row(){Cells = { "Проект №4", "3"}, Id = 3}
        };
    }

    /// <summary>
    /// Изменение элемента
    /// </summary>
    /// <param name="row"> Изменяемая строка </param>
    private void EditRow(EditRow row)
    {
        var changedItem = ProjectData.FirstOrDefault(x => x.Id == row.Id);
        if (changedItem is not null)
            changedItem.Cells[0] = row.UpdatedName;
    }

    /// <summary>
    /// Удаление элемента из списка
    /// </summary>
    /// <param name="rowId"> Id проекта </param>
    private void DeleteRow(int rowId)
    {
        var removedItem = ProjectData.FirstOrDefault(x => x.Id == rowId);
        if (removedItem is not null)
            ProjectData.Remove(removedItem);
    }

    /// <summary>
    /// Обработчик выбора селектора
    /// </summary>
    /// <param name="type">Тип создания проекта</param>
    /// <returns></returns>
    public void SelectCreateProjectType(SelectorEnum type)
    {
        switch (type)
        {
            case SelectorEnum.ByAllParams:
                CreateProjectForm = @<ProjectsPageByAllParamsPage></ProjectsPageByAllParamsPage>;
                break;
            case SelectorEnum.ByAreometer:
                CreateProjectForm = @<ProjectsPageByAreometerPage></ProjectsPageByAreometerPage>;
                break;
            case SelectorEnum.ByGrapeVarety:
                CreateProjectForm = @<ProjectsPageByGrapeVaretyPage></ProjectsPageByGrapeVaretyPage>;
                break;
            default:
                CreateProjectForm = builder => { };
                break;
        }
    }
}