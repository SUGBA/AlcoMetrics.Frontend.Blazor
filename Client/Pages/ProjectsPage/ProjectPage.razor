@page "/ProjectPage"
@using Client.Pages.ProjectsPage.Components
@using Client.Pages.ProjectsPage.Models
@using Client.Pages.ProjectsPage.Models.Request
@using Client.Pages.ProjectsPage.Request
@using Client.Pages.ProjectsPage.Services
@using Client.SharedComponents.Forms
@using Client.SharedComponents.Modal
@using Client.SharedComponents.Selectors
@using Client.SharedComponents.Tables.Models
@rendermode RenderMode.InteractiveWebAssembly
@inject IProjectPageApiService _projectPageApiService
@inject NavigationManager navManager
@inherits ComponentBase

<div class="contentRowsContainer">
    <div class="listProjects">
        @if (ProjectData != null)
        {
            <DefaultTable1 Headers="TableHeaders" Data="ProjectData" DeleteButtonEvent="DeleteRow" EditButtonEvent="EditRow" SelectRow="SelectProject" />
        }
    </div>
    <div class="selectStartDataInputType">
        <BaseSelector Options="SelectorOptions" SelectOptionEvent="SelectCreateProjectType" TEnumType="SelectorEnum" />
        @CreateProjectForm
    </div>
</div>

@code {
    /// <summary>
    /// Модалка
    /// </summary>
    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    /// <summary>
    /// Список проектов
    /// </summary>
    public List<Row>? ProjectData { get; set; }

    /// <summary>
    /// Заголовки таблицы с проектами
    /// </summary>
    private List<string> TableHeaders = new();

    /// <summary>
    /// Варианты селектора
    /// </summary>
    private Dictionary<string, SelectorEnum> SelectorOptions = new();

    /// <summary>
    /// Словарь где ключ и значение сопадают.
    /// Потому что ключ и значение совпадают (На бэк передаем название сорта винограда)
    /// </summary>
    private Dictionary<string, string> GrapeVarieties = new();

    /// <summary>
    /// Форма для создания проекта
    /// </summary>
    private RenderFragment CreateProjectForm = builder => { };

    private const string IS_SURE_DELETE_PROJECT_MESSAGE = "Вы уверены, что хотите удалить проект. Удаленный проект не подлежит восстановлению.";

    protected override async Task OnInitializedAsync()
    {
        ProjectData = await GetProjects();
        SelectorOptions = GetCreateProjectTypes();
        TableHeaders = new List<string>() { "Наименование проекта", "Количество мероприятий" };
        GrapeVarieties = await GetListGrapeVarieties();
        StateHasChanged();
    }

    /// <summary>
    /// Получить способы создания проекта
    /// </summary>
    /// <returns></returns>
    private Dictionary<string, SelectorEnum> GetCreateProjectTypes()
    {
        return new Dictionary<string, SelectorEnum>()
            {
            {"Ареометр", SelectorEnum.ByAreometer },
            {"Сорт винограда", SelectorEnum.ByGrapeVarety },
            {"Ввод показателей", SelectorEnum.ByAllParams },
            };
    }

    /// <summary>
    /// Обработчик выбора определнного проекта в списке
    /// </summary>
    private void SelectProject(int rowId)
    {
        navManager.NavigateTo($"/TimeLinePage/{rowId}");
    }

    /// <summary>
    /// Получить список проектов
    /// </summary>
    /// <returns></returns>
    private async Task<List<Row>> GetProjects()
    {
        var projects = await _projectPageApiService.GetListProjectsAsync();
        if (projects == null) return new List<Row>();

        var result = projects.Select(x => new Row() { Cells = new List<string>() { x.ProjectName, x.EventCount.ToString() }, Id = x.Id }).ToList();
        return result;
    }

    /// <summary>
    /// Изменение элемента
    /// </summary>
    /// <param name="row"> Изменяемая строка </param>
    private async Task EditRow(EditRow row)
    {
        var result = await _projectPageApiService.ChangeProjectNameAsync(new ChangeProjectNameRequest() { Id = row.Id, NewProjectName = row.UpdatedName });
        if (!result) return;

        var changedItem = ProjectData?.FirstOrDefault(x => x.Id == row.Id);
        if (changedItem is not null)
            changedItem.Cells[0] = row.UpdatedName;
    }

    /// <summary>
    /// Удаление элемента из списка
    /// </summary>
    /// <param name="rowId"> Id проекта </param>
    private async Task DeleteRow(int rowId)
    {
        if (!await ShowModalAndGetResult(IS_SURE_DELETE_PROJECT_MESSAGE, "Подтверждение удаления проекта")) return;

        var result = await _projectPageApiService.DeleteProjectAsync(rowId);
        if (!result) return;

        var removedItem = ProjectData?.FirstOrDefault(x => x.Id == rowId);
        if (removedItem is not null)
            ProjectData?.Remove(removedItem);
    }

    /// <summary>
    /// Обработчик выбора селектора
    /// </summary>
    /// <param name="type">Тип создания проекта</param>
    /// <returns></returns>
    private void SelectCreateProjectType(SelectorEnum type)
    {
        switch (type)
        {
            case SelectorEnum.ByAllParams:
                CreateProjectForm = @<ProjectsPageByAllParamsPage SubmitButton="CreateByAllParams"></ProjectsPageByAllParamsPage>;
                break;
            case SelectorEnum.ByAreometer:
                CreateProjectForm = @<ProjectsPageByAreometerPage SubmitButton="CreateByAreometer"></ProjectsPageByAreometerPage>;
                break;
            case SelectorEnum.ByGrapeVarety:
                CreateProjectForm = @<ProjectsPageByGrapeVaretyPage SubmitButton="CreateByGrapeVarety" ListGrapeVarieties="GrapeVarieties"></ProjectsPageByGrapeVaretyPage>;
                break;
            default:
                CreateProjectForm = builder => { };
                break;
        }
    }

    private async Task<Dictionary<string, string>> GetListGrapeVarieties()
    {
        var list = await _projectPageApiService.GetGrapeVarietiesAsync();

        return list.ToDictionary(key => key, val => val);
    }

    /// <summary>
    /// Обработчик события создания проекта путем ввода всех параметров
    /// </summary>
    /// <param name="request"> Модель по которой создается </param>
    /// <returns></returns>
    private async Task CreateByAllParams(CreateProjectModelByAllParams request)
    {
        var response = await _projectPageApiService.CreateTimeLineByAllParamsAsync(request);
        if (!string.IsNullOrEmpty(response.Error))
        {
            ShowErrorModal(response.Error, "Ошибка при создании проекта");
            return;
        }

        if (response.CreatedProject == null)
        {
            ShowErrorModal("Проект не был создан", "Ошибка при создании проекта");
            return;
        }

        var result = new Row()
            {
                Cells = new List<string>() { response.CreatedProject.ProjectName, response.CreatedProject.EventCount.ToString() },
                Id = response.CreatedProject.Id
            };

        ProjectData ??= new List<Row>();
        ProjectData.Add(result);
    }

    /// <summary>
    /// Обработчик события создания проекта путем ввода впоказания ареометра
    /// </summary>
    /// <param name="request"> Модель по которой создается </param>
    /// <returns></returns>
    private async Task CreateByAreometer(CreateProjectModelByAreometer request)
    {
        var response = await _projectPageApiService.CreateTimeLineByAreometerAsync(request);
        if (!string.IsNullOrEmpty(response.Error))
        {
            ShowErrorModal(response.Error, "Ошибка при создании проекта");
            return;
        }

        if (response.CreatedProject == null)
        {
            ShowErrorModal("Проект не был создан", "Ошибка при создании проекта");
            return;
        }

        var result = new Row()
            {
                Cells = new List<string>() { response.CreatedProject.ProjectName, response.CreatedProject.EventCount.ToString() },
                Id = response.CreatedProject.Id
            };

        ProjectData ??= new List<Row>();
        ProjectData.Add(result);
    }

    /// <summary>
    /// Обработчик события создания проекта путем ввода впоказания ареометра
    /// </summary>
    /// <param name="request"> Модель по которой создается </param>
    /// <returns></returns>
    private async Task CreateByGrapeVarety(CreateProjectModelByGrapeVarety request)
    {
        var response = await _projectPageApiService.CreateTimeLineByGrapeVaretyAsync(request);
        if (!string.IsNullOrEmpty(response.Error))
        {
            ShowErrorModal(response.Error, "Ошибка при создании проекта");
            return;
        }

        if (response.CreatedProject == null)
        {
            ShowErrorModal("Проект не был создан", "Ошибка при создании проекта");
            return;
        }

        var result = new Row()
            {
                Cells = new List<string>() { response.CreatedProject.ProjectName, response.CreatedProject.EventCount.ToString() },
                Id = response.CreatedProject.Id
            };

        ProjectData ??= new List<Row>();
        ProjectData.Add(result);
    }

    private void ShowErrorModal(string message, string title)
    {
        var errors = new List<string> { message };
        var parameter = new ModalParameters().Add(nameof(ErrorModal.Errors), errors);
        Modal.Show<ErrorModal>(title, parameter);
    }

    /// <summary>
    /// Отобразить модалку продолжения операции и получить результат
    /// </summary>
    /// <param name="message"> Сообщение </param>
    /// <param name="title"> Заголовок </param>
    /// <returns></returns>
    private async Task<bool> ShowModalAndGetResult(string message, string title)
    {
        var modalParams = new ModalParameters().Add(nameof(IsAgreeModal.Message), message);
        var messageForm = Modal.Show<IsAgreeModal>(title, modalParams);
        var modalResult = await messageForm.Result;

        bool isAgree = false;

        if (modalResult.Confirmed)
            isAgree = Convert.ToBoolean(modalResult.Data);

        return isAgree;
    }
}